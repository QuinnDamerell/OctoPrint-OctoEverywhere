# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Proto

import octoflatbuffers
from typing import Any
from octoeverywhere.Proto.HttpInitialContext import HttpInitialContext
from typing import Optional
class WebStreamMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = octoflatbuffers.encode.Get(octoflatbuffers.packer.uoffset, buf, offset)
        x = WebStreamMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWebStreamMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WebStreamMsg
    def Init(self, buf: bytes, pos: int):
        self._tab = octoflatbuffers.table.Table(buf, pos)

    # WebStreamMsg
    def StreamId(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def IsOpenMsg(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WebStreamMsg
    def IsCloseMsg(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WebStreamMsg
    def IsDataTransmissionDone(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WebStreamMsg
    def IsControlFlagsOnly(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # WebStreamMsg
    def FullStreamDataSize(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -1

    # WebStreamMsg
    def Data(self, j: int):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(octoflatbuffers.number_types.Uint8Flags, a + octoflatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # WebStreamMsg
    def DataAsNumpy(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(octoflatbuffers.number_types.Uint8Flags, o)
        return 0

    # WebStreamMsg
    def DataAsByteArray(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsByteArray(o)
        return 0

    # WebStreamMsg
    def DataLength(self) -> int:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WebStreamMsg
    def DataIsNone(self) -> bool:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # WebStreamMsg
    def DataCompression(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def OriginalDataSize(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def HttpInitialContext(self) -> Optional[HttpInitialContext]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = HttpInitialContext()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WebStreamMsg
    def IsWebsocketStream(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WebStreamMsg
    def StatusCode(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def WebsocketDataType(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 126

    # WebStreamMsg
    def MsgPriority(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 10

    # WebStreamMsg
    def CloseDueToRequestConnectionFailure(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(octoflatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WebStreamMsg
    def BodyReadTimeHighWaterMarkMs(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def SocketSendTimeHighWaterMarkMs(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WebStreamMsg
    def MultipartReadsPerSecond(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def WebStreamMsgStart(builder: octoflatbuffers.Builder):
    builder.StartObject(18)

def Start(builder: octoflatbuffers.Builder):
    WebStreamMsgStart(builder)

def WebStreamMsgAddStreamId(builder: octoflatbuffers.Builder, streamId: int):
    builder.PrependUint32Slot(0, streamId, 0)

def AddStreamId(builder: octoflatbuffers.Builder, streamId: int):
    WebStreamMsgAddStreamId(builder, streamId)

def WebStreamMsgAddIsOpenMsg(builder: octoflatbuffers.Builder, isOpenMsg: bool):
    builder.PrependBoolSlot(1, isOpenMsg, 0)

def AddIsOpenMsg(builder: octoflatbuffers.Builder, isOpenMsg: bool):
    WebStreamMsgAddIsOpenMsg(builder, isOpenMsg)

def WebStreamMsgAddIsCloseMsg(builder: octoflatbuffers.Builder, isCloseMsg: bool):
    builder.PrependBoolSlot(2, isCloseMsg, 0)

def AddIsCloseMsg(builder: octoflatbuffers.Builder, isCloseMsg: bool):
    WebStreamMsgAddIsCloseMsg(builder, isCloseMsg)

def WebStreamMsgAddIsDataTransmissionDone(builder: octoflatbuffers.Builder, isDataTransmissionDone: bool):
    builder.PrependBoolSlot(3, isDataTransmissionDone, 0)

def AddIsDataTransmissionDone(builder: octoflatbuffers.Builder, isDataTransmissionDone: bool):
    WebStreamMsgAddIsDataTransmissionDone(builder, isDataTransmissionDone)

def WebStreamMsgAddIsControlFlagsOnly(builder: octoflatbuffers.Builder, isControlFlagsOnly: bool):
    builder.PrependBoolSlot(4, isControlFlagsOnly, 1)

def AddIsControlFlagsOnly(builder: octoflatbuffers.Builder, isControlFlagsOnly: bool):
    WebStreamMsgAddIsControlFlagsOnly(builder, isControlFlagsOnly)

def WebStreamMsgAddFullStreamDataSize(builder: octoflatbuffers.Builder, fullStreamDataSize: int):
    builder.PrependInt64Slot(5, fullStreamDataSize, -1)

def AddFullStreamDataSize(builder: octoflatbuffers.Builder, fullStreamDataSize: int):
    WebStreamMsgAddFullStreamDataSize(builder, fullStreamDataSize)

def WebStreamMsgAddData(builder: octoflatbuffers.Builder, data: int):
    builder.PrependUOffsetTRelativeSlot(6, octoflatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder: octoflatbuffers.Builder, data: int):
    WebStreamMsgAddData(builder, data)

def WebStreamMsgStartDataVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartDataVector(builder, numElems: int) -> int:
    return WebStreamMsgStartDataVector(builder, numElems)

def WebStreamMsgAddDataCompression(builder: octoflatbuffers.Builder, dataCompression: int):
    builder.PrependInt8Slot(7, dataCompression, 0)

def AddDataCompression(builder: octoflatbuffers.Builder, dataCompression: int):
    WebStreamMsgAddDataCompression(builder, dataCompression)

def WebStreamMsgAddOriginalDataSize(builder: octoflatbuffers.Builder, originalDataSize: int):
    builder.PrependUint64Slot(8, originalDataSize, 0)

def AddOriginalDataSize(builder: octoflatbuffers.Builder, originalDataSize: int):
    WebStreamMsgAddOriginalDataSize(builder, originalDataSize)

def WebStreamMsgAddHttpInitialContext(builder: octoflatbuffers.Builder, httpInitialContext: int):
    builder.PrependUOffsetTRelativeSlot(9, octoflatbuffers.number_types.UOffsetTFlags.py_type(httpInitialContext), 0)

def AddHttpInitialContext(builder: octoflatbuffers.Builder, httpInitialContext: int):
    WebStreamMsgAddHttpInitialContext(builder, httpInitialContext)

def WebStreamMsgAddIsWebsocketStream(builder: octoflatbuffers.Builder, isWebsocketStream: bool):
    builder.PrependBoolSlot(10, isWebsocketStream, 0)

def AddIsWebsocketStream(builder: octoflatbuffers.Builder, isWebsocketStream: bool):
    WebStreamMsgAddIsWebsocketStream(builder, isWebsocketStream)

def WebStreamMsgAddStatusCode(builder: octoflatbuffers.Builder, statusCode: int):
    builder.PrependUint16Slot(11, statusCode, 0)

def AddStatusCode(builder: octoflatbuffers.Builder, statusCode: int):
    WebStreamMsgAddStatusCode(builder, statusCode)

def WebStreamMsgAddWebsocketDataType(builder: octoflatbuffers.Builder, websocketDataType: int):
    builder.PrependInt8Slot(12, websocketDataType, 126)

def AddWebsocketDataType(builder: octoflatbuffers.Builder, websocketDataType: int):
    WebStreamMsgAddWebsocketDataType(builder, websocketDataType)

def WebStreamMsgAddMsgPriority(builder: octoflatbuffers.Builder, msgPriority: int):
    builder.PrependInt8Slot(13, msgPriority, 10)

def AddMsgPriority(builder: octoflatbuffers.Builder, msgPriority: int):
    WebStreamMsgAddMsgPriority(builder, msgPriority)

def WebStreamMsgAddCloseDueToRequestConnectionFailure(builder: octoflatbuffers.Builder, closeDueToRequestConnectionFailure: bool):
    builder.PrependBoolSlot(14, closeDueToRequestConnectionFailure, 0)

def AddCloseDueToRequestConnectionFailure(builder: octoflatbuffers.Builder, closeDueToRequestConnectionFailure: bool):
    WebStreamMsgAddCloseDueToRequestConnectionFailure(builder, closeDueToRequestConnectionFailure)

def WebStreamMsgAddBodyReadTimeHighWaterMarkMs(builder: octoflatbuffers.Builder, bodyReadTimeHighWaterMarkMs: int):
    builder.PrependUint16Slot(15, bodyReadTimeHighWaterMarkMs, 0)

def AddBodyReadTimeHighWaterMarkMs(builder: octoflatbuffers.Builder, bodyReadTimeHighWaterMarkMs: int):
    WebStreamMsgAddBodyReadTimeHighWaterMarkMs(builder, bodyReadTimeHighWaterMarkMs)

def WebStreamMsgAddSocketSendTimeHighWaterMarkMs(builder: octoflatbuffers.Builder, socketSendTimeHighWaterMarkMs: int):
    builder.PrependUint16Slot(16, socketSendTimeHighWaterMarkMs, 0)

def AddSocketSendTimeHighWaterMarkMs(builder: octoflatbuffers.Builder, socketSendTimeHighWaterMarkMs: int):
    WebStreamMsgAddSocketSendTimeHighWaterMarkMs(builder, socketSendTimeHighWaterMarkMs)

def WebStreamMsgAddMultipartReadsPerSecond(builder: octoflatbuffers.Builder, multipartReadsPerSecond: int):
    builder.PrependUint8Slot(17, multipartReadsPerSecond, 0)

def AddMultipartReadsPerSecond(builder: octoflatbuffers.Builder, multipartReadsPerSecond: int):
    WebStreamMsgAddMultipartReadsPerSecond(builder, multipartReadsPerSecond)

def WebStreamMsgEnd(builder: octoflatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: octoflatbuffers.Builder) -> int:
    return WebStreamMsgEnd(builder)
