# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Proto

import octoflatbuffers
from typing import Any
from octoeverywhere.Proto.HttpHeader import HttpHeader
from typing import Optional
class HttpInitialContext(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = octoflatbuffers.encode.Get(octoflatbuffers.packer.uoffset, buf, offset)
        x = HttpInitialContext()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHttpInitialContext(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HttpInitialContext
    def Init(self, buf: bytes, pos: int):
        self._tab = octoflatbuffers.table.Table(buf, pos)

    # HttpInitialContext
    def Path(self) -> Optional[str]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HttpInitialContext
    def PathType(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # HttpInitialContext
    def Method(self) -> Optional[str]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HttpInitialContext
    def OctoHost(self) -> Optional[str]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HttpInitialContext
    def Headers(self, j: int) -> Optional[HttpHeader]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += octoflatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = HttpHeader()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HttpInitialContext
    def HeadersLength(self) -> int:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HttpInitialContext
    def HeadersIsNone(self) -> bool:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # HttpInitialContext
    def UseOctoeverywhereAuth(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def HttpInitialContextStart(builder: octoflatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: octoflatbuffers.Builder):
    HttpInitialContextStart(builder)

def HttpInitialContextAddPath(builder: octoflatbuffers.Builder, path: int):
    builder.PrependUOffsetTRelativeSlot(0, octoflatbuffers.number_types.UOffsetTFlags.py_type(path), 0)

def AddPath(builder: octoflatbuffers.Builder, path: int):
    HttpInitialContextAddPath(builder, path)

def HttpInitialContextAddPathType(builder: octoflatbuffers.Builder, pathType: int):
    builder.PrependInt8Slot(1, pathType, 1)

def AddPathType(builder: octoflatbuffers.Builder, pathType: int):
    HttpInitialContextAddPathType(builder, pathType)

def HttpInitialContextAddMethod(builder: octoflatbuffers.Builder, method: int):
    builder.PrependUOffsetTRelativeSlot(2, octoflatbuffers.number_types.UOffsetTFlags.py_type(method), 0)

def AddMethod(builder: octoflatbuffers.Builder, method: int):
    HttpInitialContextAddMethod(builder, method)

def HttpInitialContextAddOctoHost(builder: octoflatbuffers.Builder, octoHost: int):
    builder.PrependUOffsetTRelativeSlot(3, octoflatbuffers.number_types.UOffsetTFlags.py_type(octoHost), 0)

def AddOctoHost(builder: octoflatbuffers.Builder, octoHost: int):
    HttpInitialContextAddOctoHost(builder, octoHost)

def HttpInitialContextAddHeaders(builder: octoflatbuffers.Builder, headers: int):
    builder.PrependUOffsetTRelativeSlot(4, octoflatbuffers.number_types.UOffsetTFlags.py_type(headers), 0)

def AddHeaders(builder: octoflatbuffers.Builder, headers: int):
    HttpInitialContextAddHeaders(builder, headers)

def HttpInitialContextStartHeadersVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartHeadersVector(builder, numElems: int) -> int:
    return HttpInitialContextStartHeadersVector(builder, numElems)

def HttpInitialContextAddUseOctoeverywhereAuth(builder: octoflatbuffers.Builder, useOctoeverywhereAuth: int):
    builder.PrependInt8Slot(5, useOctoeverywhereAuth, 0)

def AddUseOctoeverywhereAuth(builder: octoflatbuffers.Builder, useOctoeverywhereAuth: int):
    HttpInitialContextAddUseOctoeverywhereAuth(builder, useOctoeverywhereAuth)

def HttpInitialContextEnd(builder: octoflatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: octoflatbuffers.Builder) -> int:
    return HttpInitialContextEnd(builder)
